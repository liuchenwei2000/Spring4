<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>liuchenwei</groupId>
    <artifactId>spring-boot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>spring-boot</name>

    <!-- 构建为 JAR 文件 -->
    <packaging>jar</packaging>

    <!--
    继承自 Spring Boot Starter parent，这样就能受益于 Maven 的依赖管理功能，
    对于项目中的很多依赖，就没有必要明确声明版本号，直接从 parent 中继承得到。
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.2.RELEASE</version>
    </parent>

    <!-- 使用 spring-boot 的 maven 插件构建 JAR 文件 -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- 使用 SpringMVC 来开发 Web 层 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- 使用 Thymeleaf 创建视图 -->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring4</artifactId>
        </dependency>
        <!-- 使用 JDBC 持久化数据，JDBC Starter 会将 Spring JdbcTemplate 需要的所有内容都引入进来 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <!-- 使用 MySQL 数据库，这里是其驱动 jar -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--
        使用 Spring Boot Actuator 来为基于 Spring Boot 的应用添加多个管理功能。如下：

        GET	/autoconfig	    描述了 Spring Boot 在使用自动配置的时候所作出的决策
        GET	/beans          列出运行应用所配置的 bean
        GET	/configprops    列出应用中能够用来配置 bean 的所有属性及其当前值
        GET	/dump           列出应用的线程，包括每个线程的栈跟踪信息
        GET	/env            列出应用上下文中所有可用的环境和系统属性变量
        GET	/env/{name}     展现某个特定环境变量或系统变量的值
        GET	/health         展现当前应用的健康情况
        GET	/info           展现应用特定的信息
        GET	/mappings       展现所有 URL 映射
        POST/shutdown       强制关闭应用
        GET	/trace          列出应用最近请求相关的元数据，包括请求和响应头
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator</artifactId>
        </dependency>
    </dependencies>
</project>